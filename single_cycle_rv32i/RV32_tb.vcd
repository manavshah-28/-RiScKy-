$date
	Mon Jan 22 13:05:05 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module RV32_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module DUT $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 # mux_select_top $end
$var wire 32 $ mux_in_a [31:0] $end
$var wire 32 % immediate [31:0] $end
$var wire 32 & PC_Top [31:0] $end
$var wire 32 ' PCP4_Top [31:0] $end
$var wire 32 ( Instr [31:0] $end
$var wire 1 ) Controller_WE $end
$var wire 4 * Controller_ALU [3:0] $end
$var wire 32 + ALU_res [31:0] $end
$var wire 32 , ALU_in2 [31:0] $end
$var wire 32 - ALU_in1 [31:0] $end
$var reg 1 . write $end
$scope module ALU $end
$var wire 4 / control [3:0] $end
$var wire 32 0 alu_slt [31:0] $end
$var wire 32 1 B [31:0] $end
$var wire 32 2 ALU_result [31:0] $end
$var wire 32 3 A [31:0] $end
$upscope $end
$scope module Instruction_memory $end
$var wire 1 " rst $end
$var wire 32 4 RD [31:0] $end
$var wire 32 5 A [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 6 PCP4 [31:0] $end
$var reg 32 7 PC [31:0] $end
$upscope $end
$scope module PC_adder $end
$var wire 32 8 PC_add [31:0] $end
$var wire 32 9 PCP4_add [31:0] $end
$upscope $end
$scope module controller $end
$var wire 3 : funct3 [2:0] $end
$var wire 7 ; funct7 [6:0] $end
$var wire 32 < instr [31:0] $end
$var wire 7 = opcode [6:0] $end
$var wire 5 > rd [4:0] $end
$var wire 5 ? rs1 [4:0] $end
$var wire 5 @ rs2 [4:0] $end
$var wire 1 # Imm_mux_SEL $end
$var wire 4 A ALU_control [3:0] $end
$var reg 1 ) RegWE $end
$upscope $end
$scope module immediate_gen $end
$var wire 12 B inst_imm [11:0] $end
$var wire 32 C imm [31:0] $end
$upscope $end
$scope module mux $end
$var wire 32 D b [31:0] $end
$var wire 1 # sel $end
$var wire 32 E c [31:0] $end
$var wire 32 F a [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 G AddA [4:0] $end
$var wire 5 H AddB [4:0] $end
$var wire 5 I AddD [4:0] $end
$var wire 32 J DataD [31:0] $end
$var wire 1 ) WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 K DataB [31:0] $end
$var wire 32 L DataA [31:0] $end
$var reg 5 M index [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b100 9
b0 8
b0 7
b100 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
1.
b0 -
b0 ,
b0 +
b0 *
1)
b0 (
b100 '
b0 &
b0 %
b0 $
0#
0"
1!
$end
#50
0!
#100
1!
#150
b1001 *
b1001 /
b1001 A
b1 0
b11 ,
b11 1
b11 E
b10 +
b10 2
b10 J
b11 %
b11 C
b11 D
b11 $
b11 F
b11 K
b10 -
b10 3
b10 L
b11 B
b111 :
b101 >
b11 @
b10 ?
b110011 =
b11 H
b10 G
b101 I
b1100010111001010110011 (
b1100010111001010110011 4
b1100010111001010110011 <
0!
1"
#200
b11 +
b11 2
b11 J
b1000 *
b1000 /
b1000 A
b110 :
b110 >
b110 I
b1100010110001100110011 (
b1100010110001100110011 4
b1100010110001100110011 <
b1000 '
b1000 6
b1000 9
b100 &
b100 5
b100 7
b100 8
1!
#250
0!
#300
b10 +
b10 2
b10 J
b1001 *
b1001 /
b1001 A
b1 0
b1010 ,
b1010 1
b1010 E
b1010 %
b1010 C
b1010 D
1#
b0 $
b0 F
b0 K
b1010 B
b111 :
b101 >
b1010 @
b10011 =
b1010 H
b101 I
b101000010111001010010011 (
b101000010111001010010011 4
b101000010111001010010011 <
b1100 '
b1100 6
b1100 9
b1000 &
b1000 5
b1000 7
b1000 8
1!
#350
0!
#400
b1010 +
b1010 2
b1010 J
b1000 *
b1000 /
b1000 A
b110 :
b110 >
b110 I
b101000010110001100010011 (
b101000010110001100010011 4
b101000010110001100010011 <
b10000 '
b10000 6
b10000 9
b1100 &
b1100 5
b1100 7
b1100 8
1!
#450
0!
#500
bx +
bx 2
bx J
bx *
bx /
bx A
bx ,
bx 1
bx E
b0x 0
bx %
bx C
bx D
x#
bx $
bx F
bx K
bx -
bx 3
bx L
bx B
bx ;
bx :
bx >
bx @
bx ?
bx =
bx H
bx G
bx I
bx (
bx 4
bx <
b10100 '
b10100 6
b10100 9
b10000 &
b10000 5
b10000 7
b10000 8
1!
#550
0!
#600
b11000 '
b11000 6
b11000 9
b10100 &
b10100 5
b10100 7
b10100 8
1!
#650
0!
#700
b11100 '
b11100 6
b11100 9
b11000 &
b11000 5
b11000 7
b11000 8
1!
#750
0!
#800
b100000 '
b100000 6
b100000 9
b11100 &
b11100 5
b11100 7
b11100 8
1!
#850
0!
#900
b100100 '
b100100 6
b100100 9
b100000 &
b100000 5
b100000 7
b100000 8
1!
#950
0!
#1000
b101000 '
b101000 6
b101000 9
b100100 &
b100100 5
b100100 7
b100100 8
1!
#1050
0!
