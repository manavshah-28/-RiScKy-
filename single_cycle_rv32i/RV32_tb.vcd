$date
	Mon Jan 22 16:02:18 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module RV32_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module DUT $end
$var wire 1 # WBsel $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 $ writeback [31:0] $end
$var wire 1 % mux_select_top $end
$var wire 32 & mux_in_a [31:0] $end
$var wire 32 ' immediate [31:0] $end
$var wire 32 ( dmem_out [31:0] $end
$var wire 32 ) PC_Top [31:0] $end
$var wire 32 * PCP4_Top [31:0] $end
$var wire 32 + Instr [31:0] $end
$var wire 1 , Controller_WE $end
$var wire 4 - Controller_ALU [3:0] $end
$var wire 32 . ALU_res [31:0] $end
$var wire 32 / ALU_in2 [31:0] $end
$var wire 32 0 ALU_in1 [31:0] $end
$var reg 1 1 write $end
$scope module ALU $end
$var wire 4 2 control [3:0] $end
$var wire 32 3 alu_slt [31:0] $end
$var wire 32 4 B [31:0] $end
$var wire 32 5 ALU_result [31:0] $end
$var wire 32 6 A [31:0] $end
$upscope $end
$scope module Data_memory $end
$var wire 32 7 A_mem [31:0] $end
$var wire 32 8 DataIP [31:0] $end
$var wire 1 9 MemRW $end
$var wire 1 ! clk $end
$var wire 32 : D_read [31:0] $end
$upscope $end
$scope module Instruction_memory $end
$var wire 1 " rst $end
$var wire 32 ; RD [31:0] $end
$var wire 32 < A [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 = PCP4 [31:0] $end
$var reg 32 > PC [31:0] $end
$upscope $end
$scope module PC_adder $end
$var wire 32 ? PC_add [31:0] $end
$var wire 32 @ PCP4_add [31:0] $end
$upscope $end
$scope module controller $end
$var wire 3 A funct3 [2:0] $end
$var wire 7 B funct7 [6:0] $end
$var wire 32 C instr [31:0] $end
$var wire 7 D opcode [6:0] $end
$var wire 5 E rd [4:0] $end
$var wire 5 F rs1 [4:0] $end
$var wire 5 G rs2 [4:0] $end
$var wire 1 % Imm_mux_SEL $end
$var wire 4 H ALU_control [3:0] $end
$var reg 1 , RegWE $end
$upscope $end
$scope module immediate_gen $end
$var wire 12 I inst_imm [11:0] $end
$var wire 32 J imm [31:0] $end
$upscope $end
$scope module mux $end
$var wire 32 K b [31:0] $end
$var wire 1 % sel $end
$var wire 32 L c [31:0] $end
$var wire 32 M a [31:0] $end
$upscope $end
$scope module mux1 $end
$var wire 32 N a [31:0] $end
$var wire 32 O b [31:0] $end
$var wire 1 # sel $end
$var wire 32 P c [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 Q AddA [4:0] $end
$var wire 5 R AddB [4:0] $end
$var wire 5 S AddD [4:0] $end
$var wire 32 T DataD [31:0] $end
$var wire 1 , WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 U DataB [31:0] $end
$var wire 32 V DataA [31:0] $end
$var reg 5 W index [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1 W
b0 V
b0 U
bx T
b0 S
b0 R
b0 Q
bx P
bx O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b100 @
b0 ?
b0 >
b100 =
b0 <
b0 ;
bx :
z9
bz 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
11
b0 0
b0 /
b0 .
b0 -
1,
b0 +
b100 *
b0 )
bx (
b0 '
b0 &
0%
bx $
z#
0"
1!
$end
#50
0!
#100
1!
#150
b101 -
b101 2
b101 H
b10 /
b10 4
b10 L
b1 .
b1 5
b1 7
b1 N
b10 '
b10 J
b10 K
b10 &
b10 M
b10 U
b11 0
b11 6
b11 V
b10 I
b100 A
b101 E
b10 G
b11 F
b110011 D
b10 R
b11 Q
b101 S
b1000011100001010110011 +
b1000011100001010110011 ;
b1000011100001010110011 C
0!
1"
#200
bx .
bx 5
bx 7
bx N
b11 /
b11 4
b11 L
b0x 3
b11 '
b11 J
b11 K
1%
b11 &
b11 M
b11 U
bx 0
bx 6
bx V
b11 I
b11 G
b101 F
b10011 D
b11 R
b101 Q
b1100101100001010010011 +
b1100101100001010010011 ;
b1100101100001010010011 C
b1000 *
b1000 =
b1000 @
b100 )
b100 <
b100 >
b100 ?
1!
#250
0!
#300
bx -
bx 2
bx H
bx /
bx 4
bx L
bx '
bx J
bx K
x%
bx &
bx M
bx U
bx I
bx B
bx A
bx E
bx G
bx F
bx D
bx R
bx Q
bx S
bx +
bx ;
bx C
b1100 *
b1100 =
b1100 @
b1000 )
b1000 <
b1000 >
b1000 ?
1!
#350
0!
#400
b10000 *
b10000 =
b10000 @
b1100 )
b1100 <
b1100 >
b1100 ?
1!
#450
0!
#500
b10100 *
b10100 =
b10100 @
b10000 )
b10000 <
b10000 >
b10000 ?
1!
#550
0!
#600
b11000 *
b11000 =
b11000 @
b10100 )
b10100 <
b10100 >
b10100 ?
1!
#650
0!
#700
b11100 *
b11100 =
b11100 @
b11000 )
b11000 <
b11000 >
b11000 ?
1!
#750
0!
#800
b100000 *
b100000 =
b100000 @
b11100 )
b11100 <
b11100 >
b11100 ?
1!
#850
0!
#900
b100100 *
b100100 =
b100100 @
b100000 )
b100000 <
b100000 >
b100000 ?
1!
#950
0!
#1000
b101000 *
b101000 =
b101000 @
b100100 )
b100100 <
b100100 >
b100100 ?
1!
#1050
0!
