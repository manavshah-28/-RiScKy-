$date
	Fri Jan 19 10:55:56 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module ALU_tb $end
$var wire 1 ! Z $end
$var wire 1 " V $end
$var wire 32 # Result [31:0] $end
$var wire 1 $ N $end
$var wire 1 % C $end
$var reg 32 & A [31:0] $end
$var reg 3 ' ALUControl [2:0] $end
$var reg 32 ( B [31:0] $end
$scope module alu_RISCV $end
$var wire 32 ) A [31:0] $end
$var wire 3 * ALUControl [2:0] $end
$var wire 32 + B [31:0] $end
$var wire 1 % C $end
$var wire 32 , Result [31:0] $end
$var wire 1 " V $end
$var wire 32 - a_and_b [31:0] $end
$var wire 32 . a_or_b [31:0] $end
$var wire 32 / not_b [31:0] $end
$var wire 32 0 sum [31:0] $end
$var wire 32 1 slt [31:0] $end
$var wire 32 2 mux_2 [31:0] $end
$var wire 32 3 mux_1 [31:0] $end
$var wire 1 4 cout $end
$var wire 1 ! Z $end
$var wire 1 $ N $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
04
b10100 3
b11110 2
b0 1
b11110 0
b11111111111111111111111111101011 /
b11110 .
b0 -
b11110 ,
b10100 +
b0 *
b1010 )
b10100 (
b0 '
b1010 &
0%
0$
b11110 #
0"
0!
$end
#5
1$
b1 1
b11111111111111111111111111110110 #
b11111111111111111111111111110110 ,
b11111111111111111111111111110110 2
b11111111111111111111111111101011 3
b11111111111111111111111111110110 0
b1 '
b1 *
#10
b0 1
b10100 3
1!
0$
b11110 0
b0 #
b0 ,
b0 2
b10 '
b10 *
#15
b1 1
0!
b11111111111111111111111111101011 3
b11110 #
b11110 ,
b11110 2
b11111111111111111111111111110110 0
b11 '
b11 *
#20
b0 1
1!
b0 #
b0 ,
b0 2
0"
b10100 3
b11110 0
b100 '
b100 *
#25
0!
b1 #
b1 ,
b1 2
b1 1
b11111111111111111111111111101011 3
b11111111111111111111111111110110 0
b101 '
b101 *
#35
