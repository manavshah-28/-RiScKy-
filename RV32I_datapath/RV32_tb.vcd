$date
	Fri Jan 26 18:41:10 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module RV32_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module DUT $end
$var wire 1 # BrEq $end
$var wire 1 $ BrLt $end
$var wire 1 % PCSel $end
$var wire 1 & RegWEn $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 ' wb [31:0] $end
$var wire 32 ( reg_DataB [31:0] $end
$var wire 32 ) reg_DataA [31:0] $end
$var wire 32 * immediate [31:0] $end
$var wire 32 + alu_in2 [31:0] $end
$var wire 32 , alu_in1 [31:0] $end
$var wire 32 - alu [31:0] $end
$var wire 2 . WBSel [1:0] $end
$var wire 32 / PC_out [31:0] $end
$var wire 32 0 PC_in [31:0] $end
$var wire 32 1 PC_4 [31:0] $end
$var wire 1 2 MemRW $end
$var wire 32 3 Instr [31:0] $end
$var wire 3 4 ImmSel [2:0] $end
$var wire 32 5 DataR [31:0] $end
$var wire 1 6 BrUn $end
$var wire 1 7 BSel $end
$var wire 1 8 ASel $end
$var wire 4 9 ALUSel [3:0] $end
$scope module ALU_Top $end
$var wire 4 : control [3:0] $end
$var wire 32 ; alu_slt [31:0] $end
$var wire 32 < B [31:0] $end
$var wire 32 = ALU_result [31:0] $end
$var wire 32 > A [31:0] $end
$upscope $end
$scope module Controller $end
$var wire 1 # BrEq $end
$var wire 1 $ BrLt $end
$var wire 1 % PCSel $end
$var wire 1 & RegWEn $end
$var wire 11 ? red_inst [10:0] $end
$var wire 32 @ i_instuction [31:0] $end
$var wire 15 A control_word [14:0] $end
$var wire 2 B WBSel [1:0] $end
$var wire 1 2 MemRW $end
$var wire 3 C ImmSel [2:0] $end
$var wire 1 6 BrUn $end
$var wire 1 7 BSel $end
$var wire 1 8 ASel $end
$var wire 4 D ALUSel [3:0] $end
$upscope $end
$scope module Data_mem $end
$var wire 32 E A_mem [31:0] $end
$var wire 1 2 MemRW $end
$var wire 1 ! clk $end
$var wire 32 F DataIP [31:0] $end
$var wire 32 G D_read [31:0] $end
$upscope $end
$scope module Imm_Gen $end
$var wire 3 H ImmSel [2:0] $end
$var wire 32 I immediate [31:0] $end
$var wire 32 J Instr [31:0] $end
$upscope $end
$scope module PCPlus4Top $end
$var wire 32 K PC_add [31:0] $end
$var wire 32 L PCP4_add [31:0] $end
$upscope $end
$scope module PC_Top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 M PCP4 [31:0] $end
$var reg 32 N PC [31:0] $end
$upscope $end
$scope module branch_comp $end
$var wire 1 # BrEq $end
$var wire 1 $ BrLt $end
$var wire 1 6 BrUn $end
$var wire 32 O B [31:0] $end
$var wire 32 P A [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 Q A [31:0] $end
$var wire 1 " rst $end
$var wire 32 R RD [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 S a [31:0] $end
$var wire 32 T b [31:0] $end
$var wire 32 U c [31:0] $end
$var wire 2 V sel [1:0] $end
$var wire 32 W d [31:0] $end
$upscope $end
$scope module muxA $end
$var wire 32 X b [31:0] $end
$var wire 1 8 sel $end
$var wire 32 Y c [31:0] $end
$var wire 32 Z a [31:0] $end
$upscope $end
$scope module muxB $end
$var wire 32 [ b [31:0] $end
$var wire 1 7 sel $end
$var wire 32 \ c [31:0] $end
$var wire 32 ] a [31:0] $end
$upscope $end
$scope module muxPC $end
$var wire 32 ^ a [31:0] $end
$var wire 32 _ b [31:0] $end
$var wire 1 % sel $end
$var wire 32 ` c [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 a AddA [4:0] $end
$var wire 5 b AddB [4:0] $end
$var wire 5 c AddD [4:0] $end
$var wire 32 d DataD [31:0] $end
$var wire 1 & WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 e DataB [31:0] $end
$var wire 32 f DataA [31:0] $end
$var reg 5 g index [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b100 `
b0 _
b100 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b1 V
b100 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b100 M
b100 L
b0 K
b0 J
b0 I
b1 H
b0 G
b0 F
b0 E
b1010 D
b1 C
b1 B
b100110100101 A
b0 @
b0zz ?
b0 >
b0 =
b0 <
b0 ;
b1010 :
b1010 9
08
17
06
b0 5
b1 4
b0 3
02
b100 1
b100 0
b0 /
b1 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
1&
0%
z$
z#
0"
1!
$end
#50
0!
#100
1!
#150
b10101 '
b10101 W
b10101 d
b10101 -
b10101 =
b10101 E
b10101 T
b10101 _
b1 ;
b0 4
b0 C
b0 H
07
b0 9
b0 :
b0 D
b10100 +
b10100 <
b10100 \
b101 A
b1 ,
b1 >
b1 Y
b0 *
b0 I
b0 [
b10100 (
b10100 F
b10100 O
b10100 ]
b10100 e
b1 )
b1 P
b1 Z
b1 f
b1100zz ?
b10 b
b1 a
b101 c
b1000001000001010110011 3
b1000001000001010110011 @
b1000001000001010110011 J
b1000001000001010110011 R
0!
1"
#200
b11000 '
b11000 W
b11000 d
b11000 -
b11000 =
b11000 E
b11000 T
b11000 _
b10101 +
b10101 <
b10101 \
b11 ,
b11 >
b11 Y
b10101 (
b10101 F
b10101 O
b10101 ]
b10101 e
b11 )
b11 P
b11 Z
b11 f
b101 b
b11 a
b10100011000001010110011 3
b10100011000001010110011 @
b10100011000001010110011 J
b10100011000001010110011 R
b1000 0
b1000 M
b1000 `
b1000 1
b1000 L
b1000 U
b1000 ^
b100 /
b100 K
b100 N
b100 Q
b100 X
1!
#250
0!
#300
b11101 '
b11101 W
b11101 d
b101 ,
b101 >
b101 Y
b101 )
b101 P
b101 Z
b101 f
b11101 -
b11101 =
b11101 E
b11101 T
b11101 _
b100 a
b11000 +
b11000 <
b11000 \
b10100100000001010110011 3
b10100100000001010110011 @
b10100100000001010110011 J
b10100100000001010110011 R
b11000 (
b11000 F
b11000 O
b11000 ]
b11000 e
b1100 0
b1100 M
b1100 `
b1100 1
b1100 L
b1100 U
b1100 ^
b1000 /
b1000 K
b1000 N
b1000 Q
b1000 X
1!
#350
0!
#400
x%
x6
x8
x&
b0x .
b0x B
b0x V
bx *
bx I
bx [
b0xx 4
b0xx C
b0xx H
x7
bx 5
bx G
bx S
bx 9
bx :
bx D
b0x ;
bx0xxxxxxxxx0x0x A
bx ,
bx >
bx Y
bx '
bx W
bx d
bx )
bx P
bx Z
bx f
bxzz ?
bx b
bx a
bx c
bx -
bx =
bx E
bx T
bx _
bx 3
bx @
bx J
bx R
bx +
bx <
bx \
bx 0
bx M
bx `
bx (
bx F
bx O
bx ]
bx e
b10000 1
b10000 L
b10000 U
b10000 ^
b1100 /
b1100 K
b1100 N
b1100 Q
b1100 X
1!
#450
0!
#500
bx 1
bx L
bx U
bx ^
bx /
bx K
bx N
bx Q
bx X
1!
#550
0!
#600
1!
#650
0!
#700
1!
#750
0!
#800
1!
#850
0!
#900
1!
#950
0!
#1000
1!
#1050
0!
