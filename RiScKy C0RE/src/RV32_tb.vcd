$date
	Fri Jul 05 19:19:23 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module RV32_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module DUT $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # wb [31:0] $end
$var wire 32 $ reg_DataB [31:0] $end
$var wire 32 % reg_DataA [31:0] $end
$var wire 32 & immediate [31:0] $end
$var wire 32 ' alu_in2 [31:0] $end
$var wire 32 ( alu_in1 [31:0] $end
$var wire 32 ) alu [31:0] $end
$var wire 2 * WBSel [1:0] $end
$var wire 1 + RegWEn $end
$var wire 32 , PC_out [31:0] $end
$var wire 32 - PC_in [31:0] $end
$var wire 32 . PC_4 [31:0] $end
$var wire 1 / PCSel $end
$var wire 1 0 MemRW $end
$var wire 32 1 Instr [31:0] $end
$var wire 3 2 ImmSel [2:0] $end
$var wire 32 3 DataR [31:0] $end
$var wire 1 4 BrUn $end
$var wire 1 5 BrLt $end
$var wire 1 6 BrEq $end
$var wire 1 7 BSel $end
$var wire 1 8 ASel $end
$var wire 4 9 ALUSel [3:0] $end
$scope module ALU_Top $end
$var wire 4 : control [3:0] $end
$var wire 32 ; alu_slt [31:0] $end
$var wire 32 < B [31:0] $end
$var wire 32 = ALU_result [31:0] $end
$var wire 32 > A [31:0] $end
$upscope $end
$scope module Controller $end
$var wire 11 ? red_inst [10:0] $end
$var wire 32 @ i_instuction [31:0] $end
$var wire 15 A control_word [14:0] $end
$var wire 2 B WBSel [1:0] $end
$var wire 1 + RegWEn $end
$var wire 1 / PCSel $end
$var wire 1 0 MemRW $end
$var wire 3 C ImmSel [2:0] $end
$var wire 1 4 BrUn $end
$var wire 1 5 BrLt $end
$var wire 1 6 BrEq $end
$var wire 1 7 BSel $end
$var wire 1 8 ASel $end
$var wire 4 D ALUSel [3:0] $end
$upscope $end
$scope module Data_mem $end
$var wire 32 E A_mem [31:0] $end
$var wire 1 0 MemRW $end
$var wire 1 ! clk $end
$var wire 32 F DataIP [31:0] $end
$var wire 32 G D_read [31:0] $end
$upscope $end
$scope module Imm_Gen $end
$var wire 3 H ImmSel [2:0] $end
$var wire 32 I immediate [31:0] $end
$var wire 32 J Instr [31:0] $end
$upscope $end
$scope module PCPlus4Top $end
$var wire 32 K PC_add [31:0] $end
$var wire 32 L PCP4_add [31:0] $end
$upscope $end
$scope module PC_Top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 M PCP4 [31:0] $end
$var reg 32 N PC [31:0] $end
$upscope $end
$scope module branch_comp $end
$var wire 1 4 BrUn $end
$var wire 1 5 BrLt $end
$var wire 1 6 BrEq $end
$var wire 32 O B [31:0] $end
$var wire 32 P A [31:0] $end
$upscope $end
$scope module imem $end
$var wire 32 Q A [31:0] $end
$var wire 1 " rst $end
$var wire 32 R RD [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 S a [31:0] $end
$var wire 32 T b [31:0] $end
$var wire 32 U c [31:0] $end
$var wire 2 V sel [1:0] $end
$var wire 32 W d [31:0] $end
$upscope $end
$scope module muxA $end
$var wire 32 X b [31:0] $end
$var wire 1 8 sel $end
$var wire 32 Y c [31:0] $end
$var wire 32 Z a [31:0] $end
$upscope $end
$scope module muxB $end
$var wire 32 [ b [31:0] $end
$var wire 1 7 sel $end
$var wire 32 \ c [31:0] $end
$var wire 32 ] a [31:0] $end
$upscope $end
$scope module muxPC $end
$var wire 32 ^ a [31:0] $end
$var wire 32 _ b [31:0] $end
$var wire 1 / sel $end
$var wire 32 ` c [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 5 a AddA [4:0] $end
$var wire 5 b AddB [4:0] $end
$var wire 5 c AddD [4:0] $end
$var wire 32 d DataD [31:0] $end
$var wire 1 + WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 e DataB [31:0] $end
$var wire 32 f DataA [31:0] $end
$var reg 5 g index [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b100 `
b0 _
b100 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b1 V
b100 U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b100 M
b100 L
b0 K
b0 J
b0 I
b1 H
b0 G
b0 F
b0 E
b1010 D
b1 C
b1 B
b100110100101 A
b0 @
b10 ?
b0 >
b0 =
b0 <
b0 ;
b1010 :
b1010 9
08
17
16
05
04
b0 3
b1 2
b0 1
00
0/
b100 .
b100 -
b0 ,
1+
b1 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
0"
1!
$end
#50
0!
#100
1!
#150
b0 9
b0 :
b0 D
b100100000101 A
b10010 ?
b101 c
b1010010011 1
b1010010011 @
b1010010011 J
b1010010011 R
0!
1"
#200
1/
b10 *
b10 B
b10 V
b1 2
b1 C
b1 H
17
b100100100000110 A
b1000 #
b1000 W
b1000 d
b10100 )
b10100 =
b10100 E
b10100 T
b10100 _
b1 ;
b10100 '
b10100 <
b10100 \
b10100 &
b10100 I
b10100 [
b1100110 ?
b10100 b
b101 a
b1 c
b1010000101000000011100111 1
b1010000101000000011100111 @
b1010000101000000011100111 J
b1010000101000000011100111 R
b10100 -
b10100 M
b10100 `
b1000 .
b1000 L
b1000 U
b1000 ^
b100 ,
b100 K
b100 N
b100 Q
b100 X
1!
#250
0!
#300
0/
b1 *
b1 B
b1 V
b100100000101 A
b11000 -
b11000 M
b11000 `
b101 )
b101 =
b101 E
b101 T
b101 _
b101 '
b101 <
b101 \
b101 &
b101 I
b101 [
b10010 ?
b101 b
b101 c
b101 #
b101 W
b101 d
b10100101000001010010011 1
b10100101000001010010011 @
b10100101000001010010011 J
b10100101000001010010011 R
b11000 .
b11000 L
b11000 U
b11000 ^
b10100 ,
b10100 K
b10100 N
b10100 Q
b10100 X
1!
#350
0!
#400
b110 '
b110 <
b110 \
b110 #
b110 W
b110 d
b110 &
b110 I
b110 [
b110 b
b110 a
b110 c
b110 )
b110 =
b110 E
b110 T
b110 _
b1 ;
b11000110000001100010011 1
b11000110000001100010011 @
b11000110000001100010011 J
b11000110000001100010011 R
b0 (
b0 >
b0 Y
b11100 -
b11100 M
b11100 `
b0 %
b0 P
b0 Z
b0 f
b0 $
b0 F
b0 O
b0 ]
b0 e
b11100 .
b11100 L
b11100 U
b11100 ^
b11000 ,
b11000 K
b11000 N
b11000 Q
b11000 X
1!
#450
0!
#500
1/
b10 *
b10 B
b10 V
b1 2
b1 C
b1 H
17
b100100100000110 A
b100000 #
b100000 W
b100000 d
b1000 '
b1000 <
b1000 \
b1000 &
b1000 I
b1000 [
b1000 )
b1000 =
b1000 E
b1000 T
b1000 _
b1 ;
b1100110 ?
b1000 b
b111 a
b10 c
b0 (
b0 >
b0 Y
b100000111000000101100111 1
b100000111000000101100111 @
b100000111000000101100111 J
b100000111000000101100111 R
b0 %
b0 P
b0 Z
b0 f
b0 $
b0 F
b0 O
b0 ]
b0 e
b1000 -
b1000 M
b1000 `
b100000 .
b100000 L
b100000 U
b100000 ^
b11100 ,
b11100 K
b11100 N
b11100 Q
b11100 X
1!
#550
0!
#600
0/
b1 *
b1 B
b1 V
b100100000101 A
15
b1100 -
b1100 M
b1100 `
06
b0 ;
b110 )
b110 =
b110 E
b110 T
b110 _
b1 '
b1 <
b1 \
b101 (
b101 >
b101 Y
b1 &
b1 I
b1 [
b1000 $
b1000 F
b1000 O
b1000 ]
b1000 e
b101 %
b101 P
b101 Z
b101 f
b10001 ?
b1 b
b101 a
b111 c
b110 #
b110 W
b110 d
b100101000001110010011 1
b100101000001110010011 @
b100101000001110010011 J
b100101000001110010011 R
b1100 .
b1100 L
b1100 U
b1100 ^
b1000 ,
b1000 K
b1000 N
b1000 Q
b1000 X
1!
#650
0!
#700
b111 #
b111 W
b111 d
b111 )
b111 =
b111 E
b111 T
b111 _
b110 (
b110 >
b110 Y
b110 %
b110 P
b110 Z
b110 f
b110 a
b1000 c
b100110000010000010011 1
b100110000010000010011 @
b100110000010000010011 J
b100110000010000010011 R
b10000 -
b10000 M
b10000 `
b10000 .
b10000 L
b10000 U
b10000 ^
b1100 ,
b1100 K
b1100 N
b1100 Q
b1100 X
1!
#750
0!
#800
1/
b10 *
b10 B
b10 V
b1 2
b1 C
b1 H
17
b100100100000110 A
b10100 #
b10100 W
b10100 d
05
b100010 )
b100010 =
b100010 E
b100010 T
b100010 _
b1 ;
b11100 '
b11100 <
b11100 \
b11100 &
b11100 I
b11100 [
b0 $
b0 F
b0 O
b0 ]
b0 e
b1100100 ?
b11100 b
b11 c
b1110000110000000111100111 1
b1110000110000000111100111 @
b1110000110000000111100111 J
b1110000110000000111100111 R
b100010 -
b100010 M
b100010 `
b10100 .
b10100 L
b10100 U
b10100 ^
b10000 ,
b10000 K
b10000 N
b10000 Q
b10000 X
1!
#850
0!
#900
0/
b1 *
b1 B
b1 V
b100100000101 A
b100110 -
b100110 M
b100110 `
16
b0 ;
b0 )
b0 =
b0 E
b0 T
b0 _
b0 '
b0 <
b0 \
b0 (
b0 >
b0 Y
b0 &
b0 I
b0 [
b0 %
b0 P
b0 Z
b0 f
b10010 ?
b0 b
b0 a
b0 c
b0 #
b0 W
b0 d
b10011 1
b10011 @
b10011 J
b10011 R
b100110 .
b100110 L
b100110 U
b100110 ^
b100010 ,
b100010 K
b100010 N
b100010 Q
b100010 X
1!
#950
0!
#1000
x4
x/
x8
x+
bx *
bx B
bx V
bx #
bx W
bx d
bx 3
bx G
bx S
x5
x6
bx 2
bx C
bx H
x7
bx 9
bx :
bx D
bx )
bx =
bx E
bx T
bx _
b0x ;
bx '
bx <
bx \
bx0xxx A
bx (
bx >
bx Y
bx &
bx I
bx [
bx $
bx F
bx O
bx ]
bx e
bx %
bx P
bx Z
bx f
bx ?
bx b
bx a
bx c
bx 1
bx @
bx J
bx R
bx -
bx M
bx `
b101010 .
b101010 L
b101010 U
b101010 ^
b100110 ,
b100110 K
b100110 N
b100110 Q
b100110 X
1!
#1050
0!
#1100
bx .
bx L
bx U
bx ^
bx ,
bx K
bx N
bx Q
bx X
1!
#1150
0!
#1200
1!
#1250
0!
#1300
1!
#1350
0!
#1400
1!
#1450
0!
#1500
1!
#1550
0!
#1600
1!
#1650
0!
#1700
1!
#1750
0!
#1800
1!
#1850
0!
#1900
1!
#1950
0!
#2000
1!
#2050
0!
#2100
1!
#2150
0!
#2200
1!
#2250
0!
#2300
1!
#2350
0!
#2400
1!
#2450
0!
#2500
1!
#2550
0!
#2600
1!
#2650
0!
#2700
1!
#2750
0!
#2800
1!
#2850
0!
#2900
1!
#2950
0!
#3000
1!
#3050
0!
#3100
1!
#3150
0!
